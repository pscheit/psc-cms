PHP Requirements:

- mb_* Funktionen aktiviert

Coding Konventionen:
- Verzeichnisse immer mit Trailingslash
- alle Funktionen die Pfade oder Pfad-ähnliche Parameter haben werden nur mit / überprüft, niemals mit \
- Klassendateinamen immer Groß
- Namespace-Klassen können in gleichnamigen Verzeichnissen liegen (eine Hierarchie). Dann wird vom Klassendateinamen der Namespace abgezogen
- alle Klassen müssen Object erweitern
- Exceptions dürfen in der Klasse stehen und müssen mit dem Klassennamen beginnen
- Typen einer Variablen als Strings: (siehe auch Code::getType())
    - 'unknown type'
    - bool
    - int
    - float (auch für double)
    - string
    - array
    - resource:$resourcetype (siehe PHP::get_resource_type)
    - object:$class


Module:
jedes Modul muss eine inc.config.php und eine bootstrap.php im Hauptverzeichnis haben - egal ob leer oder nicht
modulnamen immer klein!

Ordnerstruktur:

unter dem Base Ordner gibt es 2 Ordner:
src
bin

in src werden alle nicht kompilierten und zu kompilierenden Source Dateien abgelegt. 
Wenn sie kompiliert werden liegen sie im selben Unterverzeichnis allerdings statt src in bin und mit der Endung ".c.php"
(custom compilation Dateien die kompiliert aber customiert sind, haben die Endung .cc.php (ENHC) )

File-Namespaces:
das allgemeine File-Format ist wie folgt: <file-namespace>.<filename>.php 

vorhandene file-namespaces:
inc		Datei wird inkludiert, definiert Arrays oder Funktionen, aber keine komplexen Datentypen
ctrl		Datei ist ein Controller
view		Datei ist eine View
class		Datei ist eine - wie auch immer geartete - Klasse
fcts		Datei enthält eine Definitions-Sammlung von Funktionen (keinen direkt ausführbaren Code)

File-Namespaces dürfen weggelassen werden, wenn ein root Ordner den File-Namespace eindeutig definiert. Somit liegt in jedem Modul ein Unterverzeichnis "class" welches Definiert, dass alle darunterliegenden Dateien im File-Namespace class liegen. Meistens wird dies auch für view und ctrl gemacht. Um kleine Projekte übersichtlicher zu machen, ist es aber auch möglich, alle Dateien mit dem file-namespace nebeneinander zu legen.

src/module/class.model.php
src/module/class.model2.php
src/module/fcts.framework.php
src/module/ctrl.main.php
src/module/ctrl.login.php
src/module/view.welcome.php
src/module/view.goodbye.php
src/module/inc.config.php

ist also äquivalent erlaubt in:

src/module/class/model.phpn
src/module/class/model2.php

src/module/fcts.framework.php
src/module/inc.config.php

src/module/ctrl/main.php
src/module/ctrl/login.php
		
src/module/view/welcome.php
src/module/view/goodbye.php

ORM:

Objekte die mit new Object() erstellt werden, werden nie aus dem SuperCache genommen
Objekte die mit Object::factory() erstellt werden, können aus dem SuperCache genommen werden
Objekte können selbst entscheiden gecached zu werden
Für alle Objekte gilt: Tabellenname = plural(Klassenname) und Klassenname = singular(Tabellenname)




Dateien mit purem PHP Code:
psc/AutoLoader.php		lädt alle Klassen mit der php __autoload Funktion
psc/ResourceLoader.php		Unterklasse für den AutoLoader, der auch andere Resourcen finden kann



SQL:
Spaltennamen: überall wo ein Spaltenname angegeben werden kann, kann stattdessen auch ein array übergeben werden mit dem format array($table, $column). Dies ist meist besser um das Quoting zu beschleunigen. Ausnahmen sind natürlich SQL::quote(), denn SQL::quote() ist die core-funktion für quoting, es sollte dann lieber sql::autoQuote benutzt werden
