<?php

namespace Psc\CMS;

use Webforge\Types\Type;
use Webforge\Types\EntityType;
use Webforge\Types\PersistentCollectionType;

/**
 * Sub-Element von EntityMeta
 *
 * verwaltet z.B. das öffentliche Label für ein Property und so Scherze
 */
class EntityPropertyMeta extends \Psc\SimpleObject {
  
  /**
   * @var string
   */
  protected $name;

  /**
   * @var string
   */
  protected $label;
  
  /**
   * Der Hint im Frontend, wird unter der verwendeten Komponente angezeigt
   * 
   * @var string
   */
  protected $hint;
  
  /**
   * @var Psc\Data\Type\Type
   */
  protected $type;
  
  /**
   * @var bool
   */
  protected $autogeneratedValue = FALSE;
  
  public function __construct($name, Type $type, $label, $hint = NULL) {
    $this->name = $name;
    $this->type = $type;
    $this->label = $label;
    $this->hint = $hint;
  }
  
  /**
   * @param Psc\Data\Type\Type $type
   * @chainable
   */
  public function setType(Type $type) {
    $this->type = $type;
    return $this;
  }

  /**
   * @return Psc\Data\Type\Type
   */
  public function getType() {
    return $this->type;
  }

  /**
   * @return bool
   */
  public function isRelation() {
    // siehe auch \Psc\UI\DataScreener
    return $this->type instanceof PersistentCollectionType || $this->type instanceof EntityType;
  }
  
  /**
   * Gibt die GClass des Entities zurück welches sich in der Relation in diesem Property befindet
   * 
   * mach nur sinn wenn isRelation() TRUE ist
   * @return GClass
   */
  public function getRelationEntityClass() {
    if ($this->type instanceof PersistentCollectionType) {
      return $this->type->getType()->getGClass();
    } elseif ($this->type instanceof EntityType) {
      return $this->type->getGClass();
    }
  }
  
  /**
   * @param string $label
   * @chainable
   */
  public function setLabel($label) {
    $this->label = $label;
    return $this;
  }

  /**
   * @return string
   */
  public function getLabel() {
    return $this->label;
  }
  
  /**
   * @param string $name
   * @chainable
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * @return string
   */
  public function getName() {
    return $this->name;
  }

  /**
   * Returns the name of the property but cannonical
   * 
   * cannonical means: for example without i18n in front of it
   */
  public function getCanonicalName() {
    if (mb_strpos($this->name, 'i18n') === 0) {
      return mb_strtolower(mb_substr($this->name,4,1)).mb_substr($this->name, 5);
    }

    return $this->name;
  }
  
  /**
   * @param bool $autogeneratedValue
   * @chainable
   */
  public function setAutogeneratedValue($autogeneratedValue) {
    $this->autogeneratedValue = $autogeneratedValue;
    return $this;
  }

  /**
   * @return bool
   */
  public function isAutogeneratedValue() {
    return $this->autogeneratedValue;
  }
  
  /**
   * @param string $hint
   * @chainable
   */
  public function setHint($hint) {
    $this->hint = $hint;
    return $this;
  }

  /**
   * @return string
   */
  public function getHint() {
    return $this->hint;
  }
}
